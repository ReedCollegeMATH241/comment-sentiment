{"comment_text": "&gt; XML is parsed on the device wasting CPU time and battery<p>It was my understanding the XML was compiled into a binary format for faster parsing on device, am I wrong on that?<p>EDIT: \n<a href=\"http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Android_application_package\" rel=\"nofollow\">http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Android_application_package</a> &quot;resources.arsc: a file containing precompiled resources, such as binary XML for example.&quot; Ah yes, I think it does.<p>&gt; Most of all, it allows no code reuse.<p>If we are talking code reuse in terms of having one common bit of layout that is used across several different layouts, actually you can: <a href=\"http:&#x2F;&#x2F;developer.android.com&#x2F;training&#x2F;improving-layouts&#x2F;reusing-layouts.html\" rel=\"nofollow\">http:&#x2F;&#x2F;developer.android.com&#x2F;training&#x2F;improving-layouts&#x2F;reus...</a><p>Also, the Android view system as it stands is incredible flexible.<p>You can provide different layouts and style rules for different screensizes and device configs - an kinda equivalent to the webs responsive design using CSS media queries.<p>Also, every view component is just a Java class. As well as allowing you to create your own class from scratch that you can just use as part of a view, you can also extend an existing view class and just change one bit of it&#x27;s behaviour.<p>I don&#x27;t especially mean to have a go at Anko - sorry. It&#x27;s just that I think the Android views are actually pretty good, and certainly when I&#x27;m working on Android apps this isn&#x27;t one of the major problems I have!", "author": "jarofgreen", "title": null, "url": null, "timestamp": 1431273167, "created_at": "2015-05-10T15:52:47.000Z", "comment_id": "9520252", "parent_id": 9519787, "story_title": "Anko \u2013 Pleasant Android development in Kotlin", "story_id": 9519787, "story_url": "https://github.com/JetBrains/anko", "points": null}