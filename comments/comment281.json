{"comment_text": "To get from a pointer to member to a pointer to an object, you have to subtract the offset of the member within the struct from the pointer you have.<p>The point of discussion is that there is no portable way to write the &#x27;offsetof&#x27; macro, even though every compiler on the planet (AFAIK, YMMV) works fine with<p><pre><code>  #define offsetof(st, m) ((size_t)(&amp;((st *)0)-&gt;m))\n</code></pre>\nSee <a href=\"http:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Offsetof#Implementation\" rel=\"nofollow\">http:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Offsetof#Implementation</a>, <a href=\"http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;6700114&#x2F;portability-of-using-stddef-hs-offsetof-rather-than-rolling-your-own\" rel=\"nofollow\">http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;6700114&#x2F;portability-of-us...</a><p>Long story short: use what your compiler provides in <i>stddef.h</i>, and you&#x27;ll be fine. If it doesn&#x27;t provide <i>offsetof</i>, migrate to a modern ISO C compiler, or copy the definition used above, and test.", "author": "Someone", "title": null, "url": null, "timestamp": 1431284905, "created_at": "2015-05-10T19:08:25.000Z", "comment_id": "9520965", "parent_id": 9520254, "story_title": "Beyond the PDP-11: Processor support for a memory-safe C abstract machine [pdf]", "story_id": 9519812, "story_url": "http://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/201503-asplos2015-cheri-cmachine.pdf", "points": null}