{"comment_text": "This is a really interesting paper which I haven&#x27;t been able to finish in detail yet.  Just a couple of quick reactions:<p>&gt; We would like to be able to make a const pointer a\nguarantee that nothing that receives the pointer may write\nto the resulting memory. This allows const pointers to be\npassed across security-domain boundaries.<p>I&#x27;ve always wished that were the case too.  It would also allow the compiler more optimization opportunities, because it could assume that a call to f(&amp;x) will not change x unless a non-const pointer to x has escaped.<p>&gt; Container describes behavior in a macro common in the\nLinux, BSD, and Windows kernels that, given a pointer\nto a structure member, returns a pointer to the enclosing\nstructure [20]. This may or may not be permitted behavior\naccording to the standard, due to the ambiguous definition\nof \u2018object\u2019.<p>I&#x27;m not sure what interpretation of the C standard would disallow this.  For the initial member of a structure it seems particularly clear-cut that it is allowed:<p>C99, 6.7.2.1.13:<p>&quot;A pointer to a structure object, suitably converted, points to its initial member (or if that member is a bit-field, then to the unit in which it resides), and vice versa. There may be unnamed padding within a structure object, but not at its beginning.&quot;<p>This seems to pretty unambiguously state that you can convert a pointer to an initial member to a pointer to the enclosing struct.  I can&#x27;t imagine what interpretation of the standard would disallow this, or even disallow using offsetof() to convert a non-first member to a pointer to the struct.", "author": "haberman", "title": null, "url": null, "timestamp": 1431273222, "created_at": "2015-05-10T15:53:42.000Z", "comment_id": "9520254", "parent_id": 9519812, "story_title": "Beyond the PDP-11: Processor support for a memory-safe C abstract machine [pdf]", "story_id": 9519812, "story_url": "http://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/201503-asplos2015-cheri-cmachine.pdf", "points": null}