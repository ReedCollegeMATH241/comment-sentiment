{"comment_text": "&gt; The testing frameworks out there are still fairly spartan from the developer experience standpoint.<p>At IMVU, we built up a bit of scaffolding along these lines: <a href=\"https:&#x2F;&#x2F;gist.github.com&#x2F;andyfriesen&#x2F;43d886ce60927c69b3d1\" rel=\"nofollow\">https:&#x2F;&#x2F;gist.github.com&#x2F;andyfriesen&#x2F;43d886ce60927c69b3d1</a><p>The basic premise is that all our business actions can either be run &quot;for real&quot; through Yesod, or within a State-based framework that&#x27;s part of our standard testing scaffold.<p>The end result is that it&#x27;s trivial to write tests that arrange for the database, clock, sockets, and so forth to be in precisely the state we want them to be for the test, and to sense everything afterward.<p>Running these tests as pure State actions has additional benefits:<p>Since State operates by making successive state copies for each &quot;mutation&quot;, test fixtures are easily effected by performing some actions and saving the produced state.  Individual tests can start from this state as many times as desired.  The state is immutable, so test interference is impossible.<p>Additionally, tests run without access to IO.  This means that the compiler rejects any test which could forseeably intermittently fail.", "author": "implicit", "title": null, "url": null, "timestamp": 1431287288, "created_at": "2015-05-10T19:48:08.000Z", "comment_id": "9521086", "parent_id": 9519924, "story_title": "Haskell at Front Row Education", "story_id": 9519924, "story_url": "https://github.com/commercialhaskell/commercialhaskell/blob/master/usage/frontrow.md", "points": null}