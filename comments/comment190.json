{"comment_text": "&gt;There&#x27;s very little reason to use Spring today&quot;. That, frankly, is nonsense.<p>We all have our own preferences. I can guess what the &quot;very little reason means&quot;. You hear this more often in Java (EE) discussions.<p>The thing is that in 2003&#x2F;2004 Spring positioned itself as the necessary layer to make arcane Java EE APIs approachable and usable. With their FooBarTemplates Spring wraps everything that&#x27;s wrappable, and at the time it made somewhat sense. Rod couldn&#x27;t wrap EJB though, and as he deemed it &quot;unfixable&quot; he invented his own bean model to replace that.<p>At some point though Java EE started improving, and then started to improve a lot. Getting first class APIs such as JPA, co-designed by the Hibernate lead himself (Gavin King).<p>And what did Spring do? As a pavlov reaction they started wrapping again. But the JPA APIs were brand new, perfectly well designed, and didn&#x27;t need wrapping. This was the basis of the fallout between Hibernate and Spring, and a revealing moment into how Spring operated. They weren&#x27;t the benevolent dictator who out of the goodness of their hearts wanted to make life better for programmers, no, they just wanted you to depend on their APIs.<p>Rod later cashed big time, and Springsource, later pivotal became as commercial as the &quot;evil&quot; corporations they tried to wrap with their APIs.<p>Fast forward to Java EE 7, and Java EE has tons of perfectly fine APIs that don&#x27;t need the Spring wrapping treatment. JMS, JPA, Bean Validation, CDI, EL, JAX-RS, ... NOTHING of that needs wrapping by Spring to make it usable. It&#x27;s perfectly fine as-is.<p>So this is where the often heard &quot;there&#x27;s little reason to use Spring today&quot; comes from, and I guess that is what was meant. Today Spring is just another platform. Java EE programmers don&#x27;t need it to make their life better. Programmers in general can choose Java EE, or Spring, or .NET, or whatever.<p>If your preference is Spring, please, use it and be happy. It&#x27;s not better than Java EE, but likely not much worse either. I&#x27;ve seen enough Spring code and Java EE code to say it&#x27;s different, but still fairly equal.<p>I personally think the design process of Java EE is more open than that of Spring. Both are open source projects, and both have strong commercial influences as well as community influences, but with Java EE the design process is fully out in the open and people can comment on it and contribute. This is less the case with Spring. Yes, the source is open, but so is that of the Java EE RI and many other implementations. But Spring doesn&#x27;t have an open design process, where Java EE has.", "author": "henk53", "title": null, "url": null, "timestamp": 1431287086, "created_at": "2015-05-10T19:44:46.000Z", "comment_id": "9521081", "parent_id": 9520708, "story_title": "A Java EE Startup: Filtering information with zeef.com", "story_id": 9519575, "story_url": "http://www.adam-bien.com/roller/abien/entry/a_java_ee_startup_filtering", "points": null}