{"comment_text": "I imagine most Java web&#x2F;services would consider it bad style&#x2F;coupling to pick just one data back end (e.g. assume everyone uses JPA or Hibernate or what not), which would be needed to support migrations.<p>Even after Rails, the Java ecosystem is less &quot;everything out of the box&quot; and more &quot;build your own stack&quot;. There are some exceptions, e.g. Grails and Play. Although both of those have migration modules:<p><a href=\"https:&#x2F;&#x2F;www.playframework.com&#x2F;modules&#x2F;migrate-1.3.2&#x2F;home\" rel=\"nofollow\">https:&#x2F;&#x2F;www.playframework.com&#x2F;modules&#x2F;migrate-1.3.2&#x2F;home</a><p><a href=\"https:&#x2F;&#x2F;grails.org&#x2F;plugin&#x2F;database-migration\" rel=\"nofollow\">https:&#x2F;&#x2F;grails.org&#x2F;plugin&#x2F;database-migration</a><p>(First hits from Google, so apologies if those aren&#x27;t the latest&#x2F;best results.)<p>And, even then, I think both Grails&#x2F;Play also try to be backend-agnostic, e.g. the migrations being plugins instead of first-class&#x2F;backed in, like Rails which assumes &quot;yeah, you&#x27;ll basically always use a relational db&quot;.<p>Also, re migrations, a shameless plug for my ORM that relies on migrations+the database schema to codegen the rest of the boilerplate:  <a href=\"http:&#x2F;&#x2F;joist.ws&#x2F;\" rel=\"nofollow\">http:&#x2F;&#x2F;joist.ws&#x2F;</a>.", "author": "stephen", "title": null, "url": null, "timestamp": 1431280597, "created_at": "2015-05-10T17:56:37.000Z", "comment_id": "9520715", "parent_id": 9520505, "story_title": "A Java EE Startup: Filtering information with zeef.com", "story_id": 9519575, "story_url": "http://www.adam-bien.com/roller/abien/entry/a_java_ee_startup_filtering", "points": null}